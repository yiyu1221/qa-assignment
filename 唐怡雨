#面试1
import request
import os
with open('path/to/image.jpg'，'rb'） as file:
image_data = file.read()
url=’https://assessement.onrender.com/api/image‘
response=requests.post(url，data=image_data)
if response.status_code=200:
#请求成功获取永久地址
permanent_link=response.json().get('link')
print('permanent link:',permant_link)
else:
#请求失败，打印错误信息
error_message=response.josn().get('error')
print('Error:',error_message)


#面试2
import requests
import os
import zipfile

#创建一个zip文件，将多个文件添加其中
def create_zip_file(images,zip_filename):
with zipfile.Zipfile(zip_filename,'w')as zip_file:
for image_path in images:
#获取图像文件名
image filename = os.path.basename(image_path)
# 将图像添加到zip文件中
zip_file.write(image patharcname=image filename)
# 读取zip文件的数据
def read zip file(zip filename):with open(zip filename，'rb') as file:
zip data = file.read()
return zip_data
# 发送POST请求
def send post request(url, data):
response =requests.post(url， datadata)
return response
# 主函数
def main():
#图像文件列表
image files = 'path/to/image1.jpg''path/to/image2.jpg ,'path/to/image3.jpg']
# 创建一个临时zip文件
zip filename ='temp.zip!
# 将图像添加到zip文件中
create_zip_file(image_files，zip_filename)
# 读取zip文件的数据
zip_data = read zip file(zip filen
ame)
# 发送POST请求
url ='https://assessement .onrender.com/api/zip'
response = send post request(url,data=zip data
# 处理响应
if response.status code == 200:
# 请求成功，获取永久链接
permanent links = response.json().get('links')
print('Permanent links:', permanent_links)
else:
# 请求失败，打印错误信息
error_message = response.json).get( 'error')print('Error:',error message)
# 删除临时zip文件
os.remove(zip filename)
if_name_=='_main_':
main()


#图片测试场景
1.功能测试
选择符合要求的图片，上传--------上传成功；
上传成功的图片名称显示----------显示正常（根据需求）
查看，下载上传成功的图片--------上传的图片可查看或下载（根据需求）
删除上传成功的图片-------------可删除（根据需求）
替换上传成功的图片-------------可替换（根据需求）
上传图片是否支持中文名称--------根据需求而定
图片路径检查是否可手动输入----------根据需求而定
可手动输入：
手动输入正确且不存在的图片路径，上传-----上传成功
手动输入正确且存在的图片路径，上传-----上传成功
手动输入错误的图片路径，上传-----提示，不能上传
不可手动输入
选择自动带出的图片路径，上传-----上传成功
按F12篡改正确的图片路径，上传-----上传成功
按F12篡改错误的图片路径，上传-----上传失败

 


2.图片大小测试
符合格式，总大小稍小于限制大小的图片------上传成功
符合图片，总大小等于限制大小的图片--------上传成功
符合图片总大小稍大于限制大小的图片--------在上传初提示附件过大
图片大小超过存储剩余空间
图片上传时，存储空间已满

 
3.图片名称测试
图片名称命名符合要求与命名不符合要求。
图片名称过长。Win2000标准：255个字符（指在英文的字符下），如果是中文不超过127个汉字-----提示过长
图片名称达到最大长度（中文，英文或混在一起）上传后名称显示，页面排版-----------页面显示正常
图片名称中包含特殊字符-------------根据需求而定
图片名全为中文--------------------根据需求而定
图片名全为英文--------------------根据需求而定
图片名为中、英混合-----------------根据需求而定
 
4.图片类型测试
上传正确格式-----------------上传成功
上传不允许的格式--------------提示不能上传
上传rar,zip等打包图片（多图片压缩）---------根据需求而定

 

5.图片内容测试

图片内容相同，名称相同，上传-----------------上传成功
图片内容不同，名称不同，上传--------------上传成功
图片内容不同，名称相同--------------根据需求而定
图片内容相同，名称不同--------------根据需求而定
 
6.安全性测试
上传可执行图片（exe图片）-----------------根据需求而定
上传常见的木马图片------------------------提示不能上传
上传时服务器空间已满----------------------有提示
上传时服务器验证--------------------------所有的验证都在服务端，不能在客户断验证
上传时绕过验证，替换j_sessionid-----------验证失败      【抓包--修改数据--发送回服务器】     
上传时绕过验证，删除j_sessionid-----------验证失败      【抓包--删除数据--提交给服务器】


 
7.性能测试
上传时网速很慢（限速）-----------------当超过一定时间，提示
上传过程断网--------------------------有提示是否上传成功
上传过程服务器停止工资------------------有提示是否上传成功
上传过程服务器的资源利用率---------------在正常范围
发送多个上传请求
对接口进行压力测试
响应时间、吞吐量、并发数记录

8.接口测试
接口参数化：特殊字符、参数类型、参数有、无、null、必选参数、组合参数、边界值
接口功能测试： 业务流程---------正常场景、异常场景
接口性能：响应时间、吞吐量、并发数
接口安全：敏感信息加密、必要参数后端验证、接口防恶意修改
 
9.界面测试
界面美观性、易用性（键盘和鼠标的操作、tab跳转的顺序是否正确）----------显示正常（根据需求）
按钮文字是否正确--------------正确
正确/错误提示的文字是否正确---------------正确
说明性文字是否正确-----------------------正确
上传响应时间检查
上传页面显示和控制检查
 
 10.其他测试
有多个上传框时，上传相同名称的图片---------------根据需求而定
上传一个正在打开的图片-------------------------可以上传
图片路径是手工输入的是否限制长度----------------限制一定的长度
上传过程中是否有取消正在上传图片的功能-----------有
有没有已经选择好，但没有上传的图片A，另外选择图片B上传-----------上传成功
选择好但是未上传的图片是否可以取消选择------------可以取消选择
不选择文件直接点击上传，查看是否给出提示
连续多次选择不同的图片，查看是否上传最后一次选择的图片



#注册测试点
输入验证：确保用户输入的信息符合要求，例如用户名要求唯一性、密码要求强度等。
必填字段验证：确保必填字段不能为空，如用户名、密码等。
字段长度验证：检查各个字段的最大长度和最小长度是否符合要求。
格式验证：验证邮箱格式、手机号格式、日期格式等是否正确。
错误提示：输入非法或不符合要求的信息时，页面能够给出相应的错误提示，帮助用户更正错误。
注册流程测试：测试用户成功注册后，是否能正常跳转到注册成功页面，并显示相应的信息。
注册失败测试：测试用户注册失败的情况，如重复用户名、密码强度不够等，页面是否能给出相应的错误提示。
安全性测试：测试是否存在安全漏洞，如SQL注入、XSS攻击等。
兼容性测试：测试注册页面在不同浏览器、不同设备上的兼容性。
性能测试：测试注册页面的加载速度和响应时间，确保用户能够快速完成注册流程。
